	
class AerialCloudFilter(BaseFilterBackend):  # 
    aerial_param = "aerial"

    def get_filter_cloud(self, request):
        aerial_query_param = request.query_params.get(self.aerial_param, None)
        if not aerial_query_param: 
            return None
        aerial_query_param = aerial_query_param.lower()
        if aerial_query_param not in ['true', 'false'] :
            raise ParseError('Bad parameter for {self.aerial_param}.')
        return aerial_query_param.capitalize()

    def filter_queryset(self, request, queryset, view):
        filter_field = getattr(view, "aerial_filter_field") 
        if not filter_field:
            return queryset
        aerial_query_param = self.get_filter_cloud(request)
        if not aerial_query_param:
            return queryset.filter(
                Q(**{f"{filter_field}": "False"}))
            
        return queryset.filter(
            Q(**{f"{filter_field}": aerial_query_param})
        )

    def get_schema_operation_parameters(self, view):
        return [
            {
                "name": self.aerial_param,
                "in": "query",
                "required": False,
                "description": (
                    "Return features that contain the given "
                    "cloud `aerial`. Note: onlu features of the same status "
                    "will be returned"
                ),
                "schema": {"type": "string"}
            }
        ]