conda list ----tester conda
conda create --yes --name myenv2 --channel conda-forge pdal python-pdal gdal
conda activate myenv2
conda install --name myenv2 --channel conda-forge pdal python-pdal gdal
conda install --name myenv2 --channel conda-forge pdal
conda update pdal
pdal info C:\Users\sanya\Downloads\autzen.laz -p 0   ----- for test

npx http-server /chemin/vers/tes/fichiers
npx http-server -p 8082
et npx http-server --help pour connaître les [options] possibles 


(dev) PS \djangojak> psql -h localhost -U docker -p 5444 djangojak


(dev) PS \jakartowns-compose> docker-compose exec backend bash
root@37db71849b97:/code# ls
Dockerfile  djangojak  docker-compose.yml  jakartowns_backend  manage.py  pytest.ini  requirements-dev.txt  requirements.txt  scripts  setup.cfg
root@37db71849b97:/code# python manage.py migrate



functions-framework --target entry_point --debug


jak2__scanner_2__serial_4358__20200522-174633_.part362.76774-76810.geo.laz
aerial__nomDeProducteur__nomDeProject__annee__propre-nom.copc.laz
aerial__xeos__montreal__2015__267-5031.copc.laz


(dev) PS C:\ALEXANDRE\0 E2022\Stage III\dev\jakartowns-compose> docker-compose exec backend bash
root@37db71849b97:/code# python manage.py shell
Python 3.8.13 (default, May 11 2022, 08:43:25) 
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from jakartowns_backend import load_data
>>> load_data.run2()


python manage.py load_aerial_montreal --backend-url http://127.0.0.1/backend/    

docker-compose exec --help     --- help
\jakartowns-compose> docker-compose up -d     --- lance "play" de docker pour docker-compose
\jakartowns-compose> docker-compose up -d --build   --- build les images. utiliser quand on change les branches
\jakartowns-compose> docker-compose up -d frontend    --- up seulement frontend, s'il est arrete
\jakartowns-compose> docker-compose up -d --build frontend    --- rebuilder l'image
\jakartowns-compose> docker-compose up --force-recreate frontend    --- sans 'd' on voit la progression
\jakartowns-compose> docker-compose up --help
\jakartowns-compose> docker-compose up -d backend-migrations

dans le dossier djangojak, fait:
docker-compose up -d postgis
ensuite:
pytest jakartowns_backend/tests
et normalement, si ton service windows ne fonctionne pas, ça devrait se connecter
pip install -r requirements-dev.txt
pytest jakartowns_backend/tests
pytest -v .\jakartowns_backend\tests
pytest -v .\jakartowns_backend\tests\test_get.py::test_get_single_aerial_extent

Pour ouvrir des images backend, frontend ou tile-server seulement, monter aussi ngnix. il est nécessaire pour rouler ces services

override a une priorité sur compose


python -m venv venv ------ crée un environnement
CHERCHER COMMENT CREER venv pour python 3.10
venv\scripts\activate ---- activate env
pip install <name of library>


curl -X POST http://192.168.0.106:5000/debug -d "John" -d "alex"    pour tester des methods POST
curl -X GET http://127.0.0.1:5000     pour tester des methods GET
curl -X PUT http://127.0.0.1:8000/items/1?q=string_q -H "Content-Type: application/json" -d '{"name": "ddd"}'
curl -d '{"name":"value1", "price":1.01}' -H "Content-Type: application/json" -X PUT http://127.0.0.1:8000/items/1?q=string_q

uvicorn jakartowns_backend.main:app --reload


cloud compare : 
select offset from recent file
display - display settings - when moven, decimate clouds over - non
select 2 clouds, - compute cloud distance - split x, y, z  --- max.distace = 1m, compute. go to computed cloud, dans les properties go to scalar fields - active choisir Z, ajuster les couleurs et SF display params aussi

C:\Users\sanya\.ssh

up -build
docker-compose down frontend
npm install 
npx vite  --- dans frontend
